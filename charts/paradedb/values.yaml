# values.yaml

# You can manually specify secrets for credentials. If the app user or super
# user credentials are empty, they will be autogenerated by the operator.

# auth:
# Secret for the app user
# appUserCredentials:
# Name of the secret
# name: appuser-credentials
# Password for the app user (base64 encoded).
# password:
# Username for the app user (base64 encoded)
# username: paradedb

# Secret for the superuser
# superUserCredentials:
# Name of the superuser secret
# name: superuser-credentials
# Password for the superuser (base64 encoded).
# password:
# Username for the superuser (base64 encoded)
# username: postgres

# Backup credentials secret
# backupCredentials:
#   # Name of the backup credentials secret
#   name: backup-credentials
#   # AWS ACCESS_KEY_ID (base64 encoded)
#   accessKeyId:
#   # AWS ACCESS_SECRET_KEY (base64 encoded)
#   accessSecretKey:

# Configuration for the PostgreSQL cluster
cluster:
  # Description for the cluster
  description: "Cluster to run ParadeDB"
  # Postgres major version
  majorVersion: "15"
  # Override image for the PostgreSQL instance
  # imageName: ""
  # Image pull policy
  imagePullPolicy: IfNotPresent
  # Number of instances
  instances: 3
  # Start delay for the instances
  startDelay: 300
  # Stop delay for the instances
  stopDelay: 300
  # Update strategy for the primary
  primaryUpdateStrategy: unsupervised

  # PostgreSQL specific configurations
  postgresql:
    parameters:
      shared_buffers: 256MB
      sharedBuffers.max: "10000"
      pg_stat_statements.track: all
      auto_explain.log_min_duration: "10s"
      # Configure pgcron and pg_net
      pg_net.database_name: paradedb
      cron.database_name: paradedb
    pg_hba:
      - host all all 10.244.0.0/16 md5
    shared_preload_libraries:
      - pg_cron
      - pg_net
      - pgaudit

  # Bootstrap configuration for the database
  bootstrap:
    initdb:
      database: paradedb
      owner: paradedb
      # secret:
      #   name: cluster-example-app-user
      postInitApplicationSQL:
        - CREATE EXTENSION IF NOT EXISTS pg_bm25 CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_search CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_cron CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_net CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_ivm CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_graphql CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_hashids CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_jsonschema CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_repack CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_stat_monitor CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_hint_plan CASCADE;
        - CREATE EXTENSION IF NOT EXISTS roaringbitmap CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pgfaceting CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pgtap CASCADE;
        - CREATE EXTENSION IF NOT EXISTS vector CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pgaudit CASCADE;
        - CREATE EXTENSION IF NOT EXISTS postgis CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pgrouting CASCADE;
        - CREATE EXTENSION IF NOT EXISTS http CASCADE;
        - CREATE EXTENSION IF NOT EXISTS hypopg CASCADE;
        - CREATE EXTENSION IF NOT EXISTS rum CASCADE;
        - CREATE EXTENSION IF NOT EXISTS age CASCADE;
        - ALTER DATABASE paradedb SET search_path TO public,paradedb;
        - ALTER USER paradedb WITH SUPERUSER;
      postInitTemplateSQL:
        - ALTER DATABASE template1 SET search_path TO public,paradedb;

  # Storage configurations for the cluster
  storage:
    storageClass: standard
    size: 1Gi

  # Backup configurations for the cluster
  backup:
    # barmanObjectStore:
    #   destinationPath: s3://cluster-example-full-backup/
    #   endpointURL: http://custom-endpoint:1234
    #   s3Credentials:
    #     accessKeyId:
    #       name: backup-creds
    #       key: ACCESS_KEY_ID
    #     secretAccessKey:
    #       name: backup-creds
    #       key: ACCESS_SECRET_KEY
    #   wal:
    #     compression: gzip
    #     encryption: AES256
    #   data:
    #     compression: gzip
    #     encryption: AES256
    #     immediateCheckpoint: false
    #     jobs: 2
    # Retention policy for the backups
    # retentionPolicy: "30d"

  # Resource configurations for the cluster
  resources:
    requests:
      memory: "512Mi"
      cpu: "1"
    limits:
      memory: "1Gi"
      cpu: "2"

  # Certificates
  # certificates:
  # Server certificates
  # serverCASecret: my-postgresql-server-ca
  # serverTLSSecret: my-postgresql-server

  # Client certificates
  # clientCASecret: my-postgres-client-cert
  # replicationTLSSecret: my-postgres-client-cert

  # Monitoring
  monitoring:
    enablePodMonitor: true
    # customQueriesConfigMap:
    #   - name: example-monitoring
    #     key: custom-queries
    # customQueriesSecret:
    #   - name: example-monitoring-secret
    #     key: pg-database

  # Affinity configurations for the cluster
  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  # Node maintenance configurations
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
